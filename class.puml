@startuml
enum JsonType {
    GameData
    SaveData
}
class JsonConverter {
    +{static} toJSON(object: any, replacer?: (key: any, value: any) => Array<any>): any
}
interface UpdateObject {
    +isDestroyed(): boolean
    +update(dt: number): void
}
interface Transition {
    +getContainer(): PIXI.Container
    +begin(): void
    +isBegan(): boolean
    +isFinished(): boolean
    +isActive(): boolean
    +update(dt: number): void
    +setCallback(callback: () => void): void
}
class Immediate implements Transition {
    -onTransitionFinished: () => void
    -finished: boolean
    +getContainer(): PIXI.Container
    +begin(): void
    +isBegan(): boolean
    +isFinished(): boolean
    +isActive(): boolean
    +update(_dt: number): void
    +setCallback(callback: () => void): void
}
interface LoaderAddParam {
    +name: string
    +url: string
}
abstract class Scene {
    #transitionIn: Transition
    #transitionOut: Transition
    #objectsToUpdate: UpdateObject[]
    #elapsedFrameCount: number
    #uiGraph: { [key: string]: PIXI.Container; }
    #uiGraphContainer: PIXI.Container
    #registerUpdatingObject(object: UpdateObject): void
    #updateRegisteredObjects(delta: number): void
    +beginTransitionIn(onTransitionFinished: (scene: Scene) => void): void
    +beginTransitionOut(onTransitionFinished: (scene: Scene) => void): void
    +update(delta: number): void
    #createInitialResourceList(): any[]
    +beginLoadResource(onLoaded: () => void): Promise<void>
    #loadInitialResource(onLoaded: () => void): void
    -filterLoadedAssets(assets: any[]): LoaderAddParam[]
    #onInitialResourceLoaded(): LoaderAddParam[] | string[]
    #loadAdditionalResource(assets: LoaderAddParam[] | string[], onLoaded: () => void): void
    #onAdditionalResourceLoaded(): void
    #onResourceLoaded(): void
}
class SoundManager {
    +{static} instance: SoundManager
    -{static} context: AudioContext
    -{static} supportedExtensions: string[]
    -{static} webAudioInitialized: boolean
    +{static} sharedContext: AudioContext
    +{static} init(ctx?: AudioContext): void
    +{static} setSoundInitializeEvent(browser: BrowserInfo | BotInfo | NodeInfo): void
    +{static} useWebaudio(browser: BrowserInfo | BotInfo | NodeInfo): void
    +{static} decodeAudio(binary: any, callback: (buf: AudioBuffer) => void): void
    +{static} decodeAudioWithPromise(binary: any, callback: (buf: AudioBuffer) => void): void
}
class Fade implements Transition {
    -onTransitionFinished: () => void
    -alphaFrom: number
    -alphaTo: number
    -alphaProgress: number
    -container: PIXI.Container
    -overlay: PIXI.Graphics
    -transitionBegan: boolean
    -transitionFinished: boolean
    +getContainer(): PIXI.Container
    +begin(): void
    +isBegan(): boolean
    +isFinished(): boolean
    +isActive(): boolean
    +update(_dt: number): void
    +setCallback(callback: () => void): void
}
interface Selectable {
    +selectProvince(province: Province): void
}
abstract class JsonObject {
    +replacer(key: string, value: any, type: JsonType): any[]
    +toJsonObject(type: JsonType): object
}
class DivisionTemplate extends JsonObject {
    -__id: string
    -organization: number
    -attack: number
    -speed: number
    -cost: number
    -maintenance: number
    -aiProductionRate: number
    -recoveryPerTime: number
    +getId(): string
    +getSpeed(): number
    +getAttack(): number
    +getOrganization(): number
    +getAiProductionRate(): number
    +getCost(): number
    +getMaintainance(): number
    +getRecoveryPerTime(): number
    +buildDivision(country: Country): any
}
class ArrowProgress extends Arrow {
    -progress: number
    +setProgress(progress: number): void
    -{static} RECT_WIDTH: 5
}
class Combat extends JsonObject {
    -attacker: DivisionInfo
    -defender: DivisionInfo
    +combat(): void
    -endCombat(): void
    +getRoot(): DivisionInfo
    +getTarget(): DivisionInfo
    +getOpponent(division: DivisionInfo): any
    +{static} create(root: DivisionInfo, target: DivisionInfo): Combat
}
class DivisionInfo extends JsonObject {
    -_template: DivisionTemplate
    -_position: Province
    -organization: number
    -__sprite: DivisionSprite
    -_destination: Province
    -movingProgress: number
    -__progressBar: ArrowProgress
    -__combats: Combat[]
    -__dead: boolean
    -__owner: Country
    -isRetreat: boolean
    +setTemplate(template: DivisionTemplate): void
    +createSprite(): void
    +applyCost(): void
    +position: string
    +destination: string
    +getMaintainance(): any
    +setPosition(province: Province): void
    +getPosition(): Province
    +owner: Country
    +sprite: DivisionSprite
    +attack(target: DivisionInfo): void
    +getOrganization(): number
    +setOrganization(organization: number): void
    +getTemplate(): DivisionTemplate
    +moveTo(destination: Province): void
    -hasCombatWith(target: DivisionInfo): any
    +addCombat(combat: Combat): void
    +removeCombat(combat: Combat): void
    +destroy(): void
    +stopMove(): void
    +isMoving(): boolean
    +isFighting(): boolean
    +template: string
    +retreat(): void
    +update(): void
    +getSprite(): DivisionSprite
    +replacer(key: string, value: any, type: string): any[]
}
abstract class UIBox {
    +color: number
    +padding: number
    +fixSize: boolean
    +setSize(width: number, height: number): void
    +{abstract} addPart(part: PIXI.Container, maxLength?: number): void
}
class VerticalBox extends UIBox {
    -uiHeight: number
    +addPart(part: PIXI.Container): void
    +getUiHeight(): number
}
class ProgressBar {
    -bgColor: number
    -frontColor: number
    -bar: PIXI.Graphics
    +setProgress(progress: number): void
}
interface PlayCountryObserver {
    +onPlayCountryChange(country: Country): any
}
interface DiplomacyObserver {
    +onDiplomacyChange(tie: DiplomaticTie, isCreated: boolean): any
}
class DivisionSprite extends VerticalBox implements PlayCountryObserver, DiplomacyObserver {
    -info: DivisionInfo
    -selected: boolean
    -onMap: boolean
    -organizationBar: ProgressBar
    +getInfo(): DivisionInfo
    +setOnMap(flag: boolean): void
    +getOnMap(): boolean
    +select(): void
    +deselect(): void
    -onClick(e: PIXI.interaction.InteractionEvent): void
    +setOrganizationRate(organizationRate: number): void
    +getPosition(): any
    +onPlayCountryChange(country: Country): void
    +onDiplomacyChange(tie: DiplomaticTie, isCreated: boolean): void
    +destroy(): void
    -{static} MINE_COLOR: 2188857
    -{static} FRIEND_COLOR: 1588185
    -{static} NEUTRAL_COLOR: 4144959
    -{static} ENEMY_COLOR: 14622495
    -{static} selects: Set<DivisionSprite>
    +{static} moveSelectingDivisionsTo(province: Province): void
    +{static} hasSelectingDivisions(): boolean
}
class ExtendedSet<T> extends JsonObject {
    -set: Set<T>
    +add(value: T): void
    +delete(value: T): boolean
    +has(value: T): boolean
    +forEach(callback: (value: T) => void): void
    +some(callback: (value: T) => boolean): boolean
    +filter(callback: (value: T) => boolean): T[]
    +size: number
    +toJsonObject(type: JsonType): object
}
interface Observable {
    +addObserver(observer: any): void
    +removeObserver(observer: any): void
}
abstract class MapMode implements Observable {
    +{abstract} update(): void
    +{abstract} addObserver(observer: any): void
    +{abstract} removeObserver(observer: any): void
    +{abstract} destroy(): void
}
interface ProvinceObserver {
    +onProvinceChange(): any
}
interface MapModeObserver {
    +onMapModeUpdated(filter: PIXI.Filter): any
}
class PoliticalMap extends MapMode implements ProvinceObserver, Observable {
    +observers: MapModeObserver[]
    -filter: PIXI.Filter
    +update(): void
    +onProvinceChange(): void
    +addObserver(observer: MapModeObserver): void
    +removeObserver(observer: MapModeObserver): void
    +destroy(): void
}
class Atlas implements MapModeObserver {
    -provinceMap: Uint8Array
    -scene: Selectable
    -defaultWidth: number
    -defaultHeight: number
    -pressKeys: Set<string>
    -mode: MapMode
    -graphArrows: PIXI.Container[]
    +arrowLayer: PIXI.Container
    -getProvinceIdFromPoint(position: PIXI.Point): string
    -getClickedProvince(e: PIXI.interaction.InteractionEvent): Province
    +move(): void
    -getBarycenter(point: PIXI.Point): PIXI.Point
    +calculateBarycenterOfAll(): void
    -getProvince(position: PIXI.Point): Province
    +onMapModeUpdated(filter: any): void
    -moveDivisionsTo(province: Province): void
    +getNeighborProvinces(province: Province): any
    +isNextTo(province1: Province, province2: Province): boolean
    +setMode(mode: MapMode): void
    +generateProvinceGraph(): void
    +switchProvinceGraph(): void
    +{static} instance: Atlas
    -{static} BORDER_COLOR: "#000000"
    -{static} BORDER_WIDTH: 5
}
class Flag {
    -country: Country
    -onClick(): void
}
class HorizontalBox extends UIBox {
    -uiWidth: number
    +addPart(part: PIXI.Container, align?: number): void
    +replacePart(before: PIXI.Container, after: PIXI.Container): void
}
class SpriteButton
class Button {
    -text: PIXI.Text
    +setText(text: string): void
    -{static} color1: 1097536
    -{static} color2: 1114047
}
class Sound {
    -loop: boolean
    -buffer: AudioBuffer
    -gainNode: GainNode
    -source: AudioBufferSourceNode
    -played: boolean
    -paused: boolean
    -offset: number
    -playedAt: number
    +play(loop?: boolean, offset?: number): void
    +stop(): void
    +elapsedTime: number
    +pause(): void
    +resume(): void
    +volume: number
    +volume: number
    +isPlayed: boolean
    +isPaused: boolean
}
class Timer {
    -text: PIXI.Text
    -date: Date
    -isActive: boolean
    -updateDuration: number
    -progress: PIXI.Graphics
    -BUTTON_SIZE: number
    -WIDTH: number
    -PROGRESS_HEIGHT: number
    +update(elapsedFrameCount: number): boolean
    +faster(): void
    +slower(): void
    -playSE(): void
    +getDate(): Date
    -drawProgress(): void
}
interface MoneyObserver {
    +onMoneyChange(amount: number): any
}
class MoneyWatcher extends HorizontalBox implements MoneyObserver {
    -moneyText: PIXI.Text
    -target: Country
    +update(): void
    +destroy(): void
    +onMoneyChange(amount: number): void
}
class Header extends HorizontalBox {
    -myCountry: Country
    -timer: Timer
    -myFlag: Flag
    -moneyWatcher: MoneyWatcher
    +getTimer(): Timer
    +setPlayCountry(country: Country): void
    +update(): void
    +{static} DEFAULT_HEIGHT: 100
}
class Sidebar extends VerticalBox {
    #contentHeight: any
    -{static} COLOR: 4079158
    -{static} DEFAULT_WIDTH: 400
    -{static} HEADER_MARGIN: 5
    -{static} HEADER_HEIGHT: 100
}
class Dialog
class Access extends DiplomaticTie {
    +getRootIcon(): any
    +getTargetIcon(): any
    +{static} root_icon: any
    +{static} target_icon: any
}
class DiplomaticSidebar extends Sidebar {
    -scene: MainScene
    -DIPLOMACY_HEIGHT: number
    -{static} SUMMARY_HEIGHT_RATE: number
    -{static} FLAG_BOX_RATE: number
}
abstract class Effect extends JsonObject {
    +{abstract} activate(): void
}
class DeclareWar extends Effect {
    -type: string
    -_root: Country
    -_target: Country
    +activate(): void
    +root: string
    +target: string
    +replacer(key: string, value: any, type: JsonType): any[]
}
class SetOwner extends Effect {
    -type: string
    -_root: Country
    -_provinces: Province[]
    +activate(): void
    +root: string
    +provinces: string[]
    +replacer(key: string, value: any, type: JsonType): any[]
}
class Annex extends Effect {
    -type: string
    -_root: Country
    -_target: Country
    +activate(): void
    +root: string
    +target: string
    +replacer(key: string, value: any, type: JsonType): any[]
}
class Peace extends Effect {
    -type: string
    -_root: Country
    -_target: Country
    +activate(): void
    +root: string
    +target: string
    +replacer(key: string, value: any, type: JsonType): any[]
}
class ChangeName extends Effect {
    -type: string
    -_country: Country
    -name: string
    +activate(): void
    +country: string
    +replacer(key: string, value: any, type: JsonType): any[]
}
class GainAccess extends Effect {
    -type: string
    -_root: Country
    -_target: Country
    +activate(): void
    +root: string
    +target: string
    +replacer(key: string, value: any, type: JsonType): any[]
}
class DispatchEvent extends Effect {
    -type: string
    -id: string
    -time2happen: number
    +activate(): void
}
class EffectCreator {
    +{static} createEffect(effect: any): Effect
}
class Option extends JsonObject {
    -title: string
    -_effects: Effect[]
    -effects: any[]
    +takeEffects(): void
    +getTitle(): string
}
class DateAdapter {
    -date: Date
    +getTime(): number
    +getFormatedDate(format_str?: string): string
    +toJSON(): string
}
abstract class Condition extends JsonObject {
    +type: string
    +{abstract} isValid(root: Country, date: Date): boolean
    +toJSON(): any
}
abstract class CountryHandler {
    +country: Country
    +update(): void
    +getCountry(): Country
    +{abstract} dispatchEvents(): void
    +{abstract} onEvent(event: Event): void
}
class DateCondition extends Condition {
    -_when: DateAdapter
    +when: string
    +isValid(country: Country, date: Date): boolean
}
class EventFired extends Condition {
    -id: string
    +isValid(country: Country, date: Date): boolean
}
class CountryIs extends Condition {
    -_country: Country
    +isValid(country: Country, date: Date): boolean
    -country: string
    +replacer(key: string, value: any, type: JsonType): any[]
}
class And extends Condition {
    -_conditions: Condition[]
    +conditions: object[]
    +isValid(country: Country, date: Date): boolean
}
class Always extends Condition {
    -always: boolean
    +isValid(country: Country, date: Date): boolean
}
class OwnProvince extends Condition {
    -province: string
    +isValid(country: Country, date: Date): boolean
}
class AtWarWith extends Condition {
    -country: string
    +isValid(country: Country, date: Date): boolean
}
abstract class ConditionCreator {
    +{static} createCondition(condition: object): any
}
class Event extends JsonObject {
    -__id: string
    -title: string
    -desc: string
    -picture: string
    -fired: boolean
    -_condition: Condition
    -_options: Option[]
    -time2happen: number
    -triggeredOnly: boolean
    -hidden: boolean
    -_immediate: Option
    -isGlobal: boolean
    +isDispatchable(country: Country, date: Date): boolean
    +dispatch(dispatcher: CountryHandler, date: Date): void
    +condition: object
    +options: any[]
    +getOptions(): Option[]
    +getId(): string
    +setTime2happen(time2happen: any): void
    +countFoward(): void
    +isFired(): boolean
    +getDesc(): string
    +getTitle(): string
    +showDialog(): void
    -immediate: object
    +replacer(key: string, value: any, type: JsonType): any[]
}
class Conscription extends Sidebar {
    -scene: MainScene
}
class SelectScene extends Scene implements Selectable {
    -myFlag: Flag
    -target: Country
    -selectButton: Button
    -myCountry: Country
    -map: Atlas
    -changeCountryIndex: number
    -countries: Country[]
    -countryName: PIXI.Text
    -moddingMode: boolean
    -moddingProvinces: any[]
    #createInitialResourceList(): any[]
    #onResourceLoaded(): void
    -selectAsMyCountry(country?: Country): void
    -deselectMyCountry(): void
    +selectProvince(province: Province): void
    -selectAsTarget(country: Country): void
    -integrity(): void
    -confirm(): void
    +update(dt: number): void
    -{static} myFlagSize: 150
}
interface CultureObserver {
    +onCultureChange(): any
}
class CultureMap extends MapMode implements CultureObserver, Observable {
    +observers: MapModeObserver[]
    -filter: PIXI.Filter
    -cultureDictionaly: Map<string, string>
    +update(): void
    +onCultureChange(): void
    +addObserver(observer: MapModeObserver): void
    +removeObserver(observer: MapModeObserver): void
    +destroy(): void
}
class DebugSidebar extends Sidebar
class ProvinceSidebar extends Sidebar {
    -cultureButton: Button
    -provinceButton: Button
    -provinceButton2: Button
    -{static} culture_spoit: string
    -{static} province_spoit: Province
}
class CountryPlayerHandler extends CountryHandler {
    +country: Country
    +dispatchEvents(): void
    +onEvent(event: Event): void
    +update(): void
}
abstract class Util {
    +{static} getRandomInt(min?: number, max?: number): number
}
class CountryAI extends CountryHandler {
    +country: Country
    +dispatchEvents(): void
    +onEvent(event: Event): void
    +update(): void
}
class MainScene extends Scene implements Selectable, Observable {
    -playCountry: Country
    -map: Atlas
    -header: Header
    -sidebar: Sidebar
    +selectingDivison: DivisionSprite
    +cheat_move: boolean
    -observers: PlayCountryObserver[]
    #createInitialResourceList(): any[]
    #onResourceLoaded(): void
    +selectProvince(province: Province): void
    +openDiplomacySidebar(country: Country): void
    +openConscription(): void
    +openDebug(): void
    +openProvinceSidebar(province: Province): void
    +getMap(): Atlas
    +update(dt: number): void
    +getMyCountry(): Country
    +setPlayCountry(country: Country): void
    +getDate(): any
    +addObserver(observer: PlayCountryObserver): void
    +removeObserver(observer: PlayCountryObserver): void
    +{static} instance: MainScene
}
class War extends DiplomaticTie {
    +activate(): void
    +deactivate(): void
    +getRootIcon(): any
    +getTargetIcon(): any
    +{static} root_icon: any
    +{static} target_icon: any
}
abstract class DataManager extends JsonObject {
    +__onLoaded: any[]
    +__isLoaded: boolean
    +__ON_CREATED: void
    +isLoaded(): boolean
    +addListener(func: any): void
    +endLoad(test?: string): void
}
class MapDataManager<T, U> extends DataManager {
    -map: Map<T, U>
    +set(id: T, item: U): Map<T, U>
    +safeGet(id: T, onload: (item: U) => void): void
    +get(id: T): U
    +forEach(callback: (item: U) => void): void
    +size: number
    +some(callback: (item: U) => boolean): boolean
    +toJsonObject(type: JsonType): object
}
class SetDataManager<T> extends DataManager {
    -set: any
    +add(value: T): void
    +delete(value: T): any
    +has(value: T): any
    +size: any
    +setCollection(collection: any): void
    +toJsonObject(type: JsonType): object
}
class Alliance extends DiplomaticTie {
    +getRootIcon(): any
    +getTargetIcon(): any
    +{static} root_icon: any
    +{static} target_icon: any
}
class Savedata extends JsonObject {
    -_countries: Map<string, Country>
    -_provinces: any
    -_diplomacy: DiplomaticTie[]
    -_events: Map<string, Event>
    -_combats: Combat[]
    -_templates: any
    -_cultures: any
    -countries: object
    +getCountries(): Map<string, Country>
    +getCountry(id: string): Country
    -templates: object
    +getTemplates(): any
    -provinces: object
    +setProvince(id: string, province: Province): void
    +getProvinces(): any
    -diplomacy: object[]
    +addDiplomacy(diplomacy: DiplomaticTie): void
    +removeDiplomacy(diplomacy: DiplomaticTie): void
    -events: object
    +getEvents(): Map<string, Event>
    -combats: object[]
    +addCombat(combat: Combat): void
    +removeCombat(combat: Combat): void
    +getCombats(): Combat[]
    +load(json: object): void
    -cultures: object
    +getCultures(): any
    +download(type: JsonType): void
    +replacer(key: string, value: any, type: JsonType): any[]
}
class GameManager {
    +game: PIXI.Application
    -sceneTransitionOutFinished: boolean
    -currentScene?: Scene
    -sceneResourceLoaded: boolean
    +data: Savedata
    +{static} instance: GameManager
    +{static} start(params: { glWidth: number; glHeight: number; backgroundColor: number; }): void
    +{static} transitionInIfPossible(newScene: Scene): boolean
    +{static} loadScene(newScene: Scene): void
}
abstract class DiplomaticTie extends JsonObject {
    -type: string
    #root: Country
    #target: Country
    #active: boolean
    +getRoot(): Country
    +getTarget(): Country
    +getOpponent(country: Country): any
    +activate(): void
    +deactivate(): void
    +{abstract} getRootIcon(): any
    +{abstract} getTargetIcon(): any
    +replacer(key: string, value: any, type: JsonType): any[]
    +{static} root_icon: string
    +{static} target_icon: string
}
class Money implements Observable {
    -money: number
    +observers: MoneyObserver[]
    +getMoney(): number
    +setMoney(money: number): void
    +addObserver(observer: MoneyObserver): void
    +removeObserver(observer: MoneyObserver): void
}
class Leader extends JsonObject {
    -__name: string
    -imgPath: string
    -name: string
    +getName(): string
    +getImgPath(): string
    +{static} DEFAULT_NAME: "DEFAULT_LEADER_NAME"
}
class Country extends JsonObject implements Observable {
    -__id: string
    -_color: number
    +name: string
    +flag: string
    -_culture: string
    -__diplomaticTies: DiplomaticTie[]
    -_divisions: DivisionInfo[]
    -__handler: CountryHandler
    +__money: Money
    -_leaders: Map<string, Leader>
    -_leader: Leader
    -__observers: DiplomacyObserver[]
    +addDiplomaticRelation(tie: DiplomaticTie): void
    +removeDiplomaticRelation(tie: DiplomaticTie): void
    +getDiplomacy(): DiplomaticTie[]
    +color: string
    +getColor(): number
    +id: string
    -divisions: any
    +getRandomOwnProvince(): any
    +getWarInfoWith(country: Country): War
    +hasWar(): boolean
    +calcMaintanance(): number
    +calcBalance(): number
    +update(): void
    +getDivisions(): DivisionInfo[]
    +addDivision(division: DivisionInfo): void
    +removeDivision(division: DivisionInfo): void
    +destroy(): void
    +hasAccessTo(country: Country): boolean
    -culture: string
    +getCulture(): string
    -leaders: object
    -leader: string
    +getLeaders(): Map<string, Leader>
    +getLeader(): Leader
    +setHandler(handler: CountryHandler): void
    +onEvent(event: Event): void
    +addObserver(observer: DiplomacyObserver): void
    +removeObserver(observer: DiplomacyObserver): void
    +alliesWith(target: Country): boolean
    +replacer(key: string, value: any, type: JsonType): any[]
    -{static} SEA_ID: "Sea"
}
class DivisionStacker {
    -divisions: any
    -sprites: any
    +addDivison(division: DivisionInfo): void
    +removeDivision(division: DivisionInfo): void
    +showSprite(division: DivisionInfo): void
    +getDivisions(): any
    -addSprite(sprite: DivisionSprite): void
    -removeSprite(sprite: DivisionSprite): void
    -repositionStack(): void
    -{static} GAP: 2
}
class Province extends JsonObject implements Observable {
    -__id: string
    -_owner: Country
    -x: number
    -y: number
    -__divisions: any
    -_culture: string
    -__observers: ProvinceObserver[]
    -__cultureObservers: CultureObserver[]
    -_neighbours: any
    -owner: string
    +getId(): string
    +getOwner(): Country
    +setOwner(owner: Country): void
    +setCoord(point: PIXI.Point): void
    +getCoord(): PIXI.Point
    +addDivision(division: DivisionInfo): void
    +removeDivision(division: DivisionInfo): void
    +getDivisons(): any
    +isNextTo(province: Province): boolean
    +hasPeaceAccess(country: Country): any
    +hasAccess(country: Country): any
    -culture: string
    +setCulture(culture: string): void
    +getCulture(): string
    +addObserver(observer: ProvinceObserver): void
    +removeObserver(observer: ProvinceObserver): void
    +addCultureObserver(observer: CultureObserver): void
    +removeCultureObserver(observer: CultureObserver): void
    +neighbours: any
    +getNeighbours(): any
    +getDivisionStacker(): any
    +replacer(key: string, value: any, type: JsonType): any[]
}
class Arrow {
    +length: number
    +width: number
    +color: number
    -createTriangle(): PIXI.Graphics
    +{static} TRIANGLE_HEIGHT: 10
}
class TitleScene extends Scene {
    -text: PIXI.Text
    -textAppealDuration: number
    #createInitialResourceList(): any[]
    #onResourceLoaded(): void
    -onPointerDown(): void
    +update(dt: number): void
}
Scene --> "1" Transition
Scene --> "*" UpdateObject
Scene --> "1" UpdateObject
Scene --> "*" LoaderAddParam
Scene --> "1" LoaderAddParam
Selectable --> "1" Province
JsonObject --> "1" JsonType
DivisionTemplate --> "1" Country
Combat --> "1" DivisionInfo
DivisionInfo --> "1" DivisionTemplate
DivisionInfo --> "1" Province
DivisionInfo --> "1" DivisionSprite
DivisionInfo --> "1" ArrowProgress
DivisionInfo --> "*" Combat
DivisionInfo --> "1" Country
DivisionInfo --> "1" Combat
PlayCountryObserver --> "1" Country
DiplomacyObserver --> "1" DiplomaticTie
DivisionSprite --> "1" DivisionInfo
DivisionSprite --> "1" ProgressBar
DivisionSprite --> "1" Country
DivisionSprite --> "1" DiplomaticTie
DivisionSprite --> "1" Province
ExtendedSet --> "1" JsonType
PoliticalMap --> "*" MapModeObserver
PoliticalMap --> "1" MapModeObserver
Atlas --> "1" Selectable
Atlas --> "1" MapMode
Atlas --> "1" Province
Flag --> "1" Country
MoneyWatcher --> "1" Country
Header --> "1" Country
Header --> "1" Timer
Header --> "1" Flag
Header --> "1" MoneyWatcher
DiplomaticSidebar --> "1" MainScene
DeclareWar --> "1" Country
DeclareWar --> "1" JsonType
SetOwner --> "1" Country
SetOwner --> "*" Province
SetOwner --> "1" JsonType
Annex --> "1" Country
Annex --> "1" JsonType
Peace --> "1" Country
Peace --> "1" JsonType
ChangeName --> "1" Country
ChangeName --> "1" JsonType
GainAccess --> "1" Country
GainAccess --> "1" JsonType
EffectCreator --> "1" Effect
Option --> "*" Effect
Condition --> "1" Country
CountryHandler --> "1" Country
CountryHandler --> "1" Event
DateCondition --> "1" DateAdapter
DateCondition --> "1" Country
EventFired --> "1" Country
CountryIs --> "1" Country
CountryIs --> "1" JsonType
And --> "*" Condition
And --> "1" Country
Always --> "1" Country
OwnProvince --> "1" Country
AtWarWith --> "1" Country
Event --> "1" Condition
Event --> "*" Option
Event --> "1" Option
Event --> "1" Country
Event --> "1" CountryHandler
Event --> "1" JsonType
Conscription --> "1" MainScene
SelectScene --> "1" Flag
SelectScene --> "1" Country
SelectScene --> "1" Button
SelectScene --> "1" Atlas
SelectScene --> "*" Country
SelectScene --> "1" Province
CultureMap --> "*" MapModeObserver
CultureMap --> "1" MapModeObserver
ProvinceSidebar --> "1" Button
ProvinceSidebar --> "1" Province
CountryPlayerHandler --> "1" Country
CountryPlayerHandler --> "1" Event
CountryAI --> "1" Country
CountryAI --> "1" Event
MainScene --> "1" Country
MainScene --> "1" Atlas
MainScene --> "1" Header
MainScene --> "1" Sidebar
MainScene --> "1" DivisionSprite
MainScene --> "*" PlayCountryObserver
MainScene --> "1" Province
MainScene --> "1" PlayCountryObserver
MapDataManager --> "1" JsonType
SetDataManager --> "1" JsonType
Savedata --> "1" Country
Savedata --> "*" DiplomaticTie
Savedata --> "1" Event
Savedata --> "*" Combat
Savedata --> "1" Province
Savedata --> "1" DiplomaticTie
Savedata --> "1" Combat
Savedata --> "1" JsonType
GameManager --> "1" Scene
GameManager --> "1" Savedata
DiplomaticTie --> "1" Country
DiplomaticTie --> "1" JsonType
Money --> "*" MoneyObserver
Money --> "1" MoneyObserver
Country --> "*" DiplomaticTie
Country --> "*" DivisionInfo
Country --> "1" CountryHandler
Country --> "1" Money
Country --> "1" Leader
Country --> "*" DiplomacyObserver
Country --> "1" DiplomaticTie
Country --> "1" War
Country --> "1" DivisionInfo
Country --> "1" Event
Country --> "1" DiplomacyObserver
Country --> "1" JsonType
DivisionStacker --> "1" DivisionInfo
DivisionStacker --> "1" DivisionSprite
Province --> "1" Country
Province --> "*" ProvinceObserver
Province --> "*" CultureObserver
Province --> "1" DivisionInfo
Province --> "1" ProvinceObserver
Province --> "1" CultureObserver
Province --> "1" JsonType
@enduml